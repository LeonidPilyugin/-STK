<doc>
  <assembly>
    <name>AGI.STKUtil</name>
  </assembly>
  <members>
    <member name="T:AGI.STKUtil.AgELogMsgType">
      <summary>Log message types.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgType.eLogMsgDebug">
      <summary>Debugging message.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgType.eLogMsgInfo">
      <summary>Informational message.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgType.eLogMsgForceInfo">
      <summary>Informational message.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgType.eLogMsgWarning">
      <summary>Warning message.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgType.eLogMsgAlarm">
      <summary>Alarm message.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgELogMsgDispID">
      <summary>Log message destination options.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgDispID.eLogMsgDispAll">
      <summary>STK displays the message in all the log destination.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgDispID.eLogMsgDispDefault">
      <summary>STK displays the message in the default log destination.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgDispID.eLogMsgDispMsgWin">
      <summary>STK displays the message in the message window.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELogMsgDispID.eLogMsgDispStatusBar">
      <summary>STK displays the message in the status bar.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgELineStyle">
      <summary>Line Style</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eSolid">
      <summary>Specifies a solid line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eDashed">
      <summary>Specifies a dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eDotted">
      <summary>Specifies a dotted line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eDotDashed">
      <summary>Dot-dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eLongDashed">
      <summary>Specifies a long dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eDashDotDotted">
      <summary>Specifies an alternating dash-dot-dot line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eMDash">
      <summary>Specifies a user configurable medium dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eLDash">
      <summary>Specifies a user configurable long dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eSDashDot">
      <summary>Specifies a user configurable small dash-dotted line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eMDashDot">
      <summary>Specifies a user configurable medium dash-dotted line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eLDashDot">
      <summary>Specifies a user configurable long dash-dotted line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eMSDash">
      <summary>Specifies a user configurable medium followed by small dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eLSDash">
      <summary>Specifies a user configurable long followed by small dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eLMDash">
      <summary>Specifies a user configurable long followed by medium dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eLMSDash">
      <summary>Specifies a user configurable medium followed by small dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eDot">
      <summary>Specifies a dotted line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eLongDash">
      <summary>Specifies a long dashed line.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgELineStyle.eSDash">
      <summary>Specifies an alternating dash-dot line.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEFillStyle">
      <summary>Fill Style</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleSolid">
      <summary>Specifies a solid fill style.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleHorizontalStripe">
      <summary>Specifies a horizontally striped fill style.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleDiagonalStripe1">
      <summary>Specifies a diagonally striped fill style.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleDiagonalStripe2">
      <summary>Specifies a diagonally striped fill style.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleHatch">
      <summary>Specifies a hatched fill style.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleDiagonalHatch">
      <summary>Specifies a diagonally hatched fill style.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleScreen">
      <summary>Specifies a special fill style where every other pixel is drawn.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEFillStyle.eFillStyleVerticalStripe">
      <summary>Specifies a vertically striped fill style.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEExecMultiCmdResultAction">
      <summary>Enumeration defines a set of actions when an error occurs while executing a command batch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEExecMultiCmdResultAction.eContinueOnError">
      <summary>Continue executing the remaining commands in the command batch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEExecMultiCmdResultAction.eStopOnError">
      <summary>Terminate the execution of the command batch but do not throw an exception.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEExecMultiCmdResultAction.eExceptionOnError">
      <summary>Terminate the execution of the command batch and throw an exception.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEExecMultiCmdResultAction.eIgnoreExecCmdResult">
      <summary>Ignore results returned by individual commands. The option must be used in combination with other flags.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgOrbitState">
      <summary>Interface to set and retrieve the coordinate type used to specify the orbit state.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.ConvertTo(AGI.STKUtil.AgEOrbitStateType)">
      <summary>Method to changes the coordinate type to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.Assign(AGI.STKUtil.IAgOrbitState)">
      <summary>Assign a new coordinate type.</summary>
      <param name="pOrbitState"><para>The IAgOrbitState type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.AssignClassical(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Classical representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="SemiMajorAxis"></param>
      <param name="Eccentricity"></param>
      <param name="Inclination"></param>
      <param name="ArgOfPerigee"></param>
      <param name="RAAN"></param>
      <param name="MeanAnomaly"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.AssignCartesian(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Cartesian representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="XPosition"></param>
      <param name="YPosition"></param>
      <param name="ZPosition"></param>
      <param name="XVelocity"></param>
      <param name="YVelocity"></param>
      <param name="ZVelocity"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.AssignGeodetic(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Geodetic representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="Latitude"></param>
      <param name="Longitude"></param>
      <param name="Altitude"></param>
      <param name="LatitudeRate"></param>
      <param name="LongitudeRate"></param>
      <param name="AltitudeRate"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.AssignEquinoctialPosigrade(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Equinoctial representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="SemiMajorAxis"></param>
      <param name="H"></param>
      <param name="K"></param>
      <param name="P"></param>
      <param name="Q"></param>
      <param name="MeanLon"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.AssignEquinoctialRetrograde(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Equinoctial representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="SemiMajorAxis"></param>
      <param name="H"></param>
      <param name="K"></param>
      <param name="P"></param>
      <param name="Q"></param>
      <param name="MeanLon"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.AssignMixedSpherical(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Mixed Spherical representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="Latitude"></param>
      <param name="Longitude"></param>
      <param name="Altitude"></param>
      <param name="HorFlightPathAngle"></param>
      <param name="FlightPathAzimuth"></param>
      <param name="Velocity"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrbitState.AssignSpherical(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Spherical representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="RightAscension"></param>
      <param name="Declination"></param>
      <param name="Radius"></param>
      <param name="HorFlightPathAngle"></param>
      <param name="FlightPathAzimuth"></param>
      <param name="Velocity"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrbitState.OrbitStateType">
      <summary>Returns the coordinate type currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrbitState.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrbitState.Epoch">
      <summary>The state epoch</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEOrbitStateType">
      <summary>Coordinate types used in specifying orbit state.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrbitStateType.eOrbitStateCartesian">
      <summary>Cartesian coordinate type.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrbitStateType.eOrbitStateClassical">
      <summary>Classical (Keplerian) coordinate type.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrbitStateType.eOrbitStateEquinoctial">
      <summary>Equinoctial coordinate type.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrbitStateType.eOrbitStateDelaunay">
      <summary>Delaunay variables coordinate type.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrbitStateType.eOrbitStateSpherical">
      <summary>Spherical coordinate type.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrbitStateType.eOrbitStateMixedSpherical">
      <summary>Mixed spherical coordinate type.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrbitStateType.eOrbitStateGeodetic">
      <summary>Geodetic coordinate type.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgECoordinateSystem">
      <summary>Earth-centered coordinate systems for defining certain propagators.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemUnknown">
      <summary>Represents coordinate system not supported by the Object Model</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemAlignmentAtEpoch">
      <summary>Alignment at Epoch: an inertial system coincident with ECF at the Coord Epoch. Often used to specify launch trajectories.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemB1950">
      <summary>B1950: X points toward the mean vernal equinox and Z points along the mean rotation axis of the Earth at the beginning of the Besselian year 1950 and corresponds to 31 December 1949 22:09:07.2 or JD 2433282.423.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemFixed">
      <summary>Fixed: X is fixed at 0 deg longitude, Y is fixed at 90 deg longitude, and Z is directed toward the north pole.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemJ2000">
      <summary>J2000: X points toward the mean vernal equinox and Z points along the mean rotation axis of the Earth on 1 Jan 2000 at 12:00:00.00 TDB, which corresponds to JD 2451545.0 TDB.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemMeanOfDate">
      <summary>Mean of Date: X points toward the mean vernal equinox and Z points along the mean rotation axis of the Earth at the Orbit Epoch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemMeanOfEpoch">
      <summary>Mean of Epoch: X points toward the mean vernal equinox and Z points along the mean rotation axis of the Earth at the Coord Epoch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemTEMEOfDate">
      <summary>TEME of Date: X points toward the mean vernal equinox and Z points along the true rotation axis of the Earth at the Orbit Epoch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemTEMEOfEpoch">
      <summary>TEME of Epoch: X points toward the mean vernal equinox and Z points along the true rotation axis of the Earth at the Coord Epoch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemTrueOfDate">
      <summary>True of Date: X points toward the true vernal equinox and Z points along the true rotation axis of the Earth at the Orbit Epoch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemTrueOfEpoch">
      <summary>True of Epoch: X points toward the true vernal equinox and Z points along the true rotation axis of the Earth at the Coord Epoch.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemTrueOfRefDate">
      <summary>True of Ref Date: A special case of True of Epoch. Instead of the Coord Epoch, this system uses a Reference Date defined in the Integration Control page of the scenario's PODS properties.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemICRF">
      <summary>ICRF: International Celestial Reference Frame.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemMeanEarth">
      <summary>Mean Earth</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemFixedNoLibration">
      <summary>uses an analytic formula not modeling lunar libration</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemFixedIAU2003">
      <summary>Fixed_IAU2003</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemPrincipalAxes421">
      <summary>PrincipalAxes_421</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemPrincipalAxes403">
      <summary>PrincipalAxes_403</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemInertial">
      <summary>Inertial</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemJ2000Ecliptic">
      <summary>The mean ecliptic system evaluated at the J2000 epoch. The mean ecliptic plane is defined as the rotation of the J2000 XY plane about the J2000 X axis by the mean obliquity defined using FK5 IAU76 theory.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemTrueEclipticOfDate">
      <summary>The true ecliptic system, evaluated at each given time. The true ecliptic plane is defined as the rotation of the J2000 XY plane about the J2000 X axis by the true obliquity defined using FK5 IAU76 theory.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgECoordinateSystem.eCoordinateSystemPrincipalAxes430">
      <summary>PrincipalAxes_430</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgOrbitState">
      <summary>The hidden interface for IAgOrbitState</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.ConvertTo(AGI.STKUtil.AgEOrbitStateType)">
      <summary>Method to changes the coordinate type to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.Assign(AGI.STKUtil.IAgOrbitState)">
      <summary>Assign a new new coordinate type.</summary>
      <param name="pOrbitState"><para>The IAgOrbitState type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.AssignClassical(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Classical representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="SemiMajorAxis"></param>
      <param name="Eccentricity"></param>
      <param name="Inclination"></param>
      <param name="ArgOfPerigee"></param>
      <param name="RAAN"></param>
      <param name="MeanAnomaly"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.AssignCartesian(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Cartesian representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="XPosition"></param>
      <param name="YPosition"></param>
      <param name="ZPosition"></param>
      <param name="XVelocity"></param>
      <param name="YVelocity"></param>
      <param name="ZVelocity"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.AssignGeodetic(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Geodetic representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="Latitude"></param>
      <param name="Longitude"></param>
      <param name="Altitude"></param>
      <param name="LatitudeRate"></param>
      <param name="LongitudeRate"></param>
      <param name="AltitudeRate"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.AssignEquinoctialPosigrade(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Equinoctial representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="SemiMajorAxis"></param>
      <param name="H"></param>
      <param name="K"></param>
      <param name="P"></param>
      <param name="Q"></param>
      <param name="MeanLon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.AssignEquinoctialRetrograde(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Equinoctial representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="SemiMajorAxis"></param>
      <param name="H"></param>
      <param name="K"></param>
      <param name="P"></param>
      <param name="Q"></param>
      <param name="MeanLon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.AssignMixedSpherical(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Mixed Spherical representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="Latitude"></param>
      <param name="Longitude"></param>
      <param name="Altitude"></param>
      <param name="HorFlightPathAngle"></param>
      <param name="FlightPathAzimuth"></param>
      <param name="Velocity"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrbitState.AssignSpherical(AGI.STKUtil.AgECoordinateSystem,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to assign a new orbit state using Spherical representation</summary>
      <param name="ECoordinateSystem"></param>
      <param name="RightAscension"></param>
      <param name="Declination"></param>
      <param name="Radius"></param>
      <param name="HorFlightPathAngle"></param>
      <param name="FlightPathAzimuth"></param>
      <param name="Velocity"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgOrbitState.OrbitStateType">
      <summary>Returns the coordinate type currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrbitState.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrbitState.Epoch">
      <summary>The state epoch. Uses DateFormat Dimension.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgExecCmdResult">
      <summary>Collection of strings returned by the ExecuteCommand.</summary>
      <remarks><para>This object is not creatable. It is returned by the ExecuteCommand method.</para></remarks>
    </member>
    <member name="M:AGI.STKUtil.AgExecCmdResult.Range(System.Int32,System.Int32)">
      <summary>Return the elements within the specified range.</summary>
      <param name="StartIndex"></param>
      <param name="StopIndex"></param>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResult.Count">
      <summary>Number of elements contained in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResult.Item">
      <summary>Gets the element at the specified index (0-based).</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResult._NewEnum">
      <summary>Returns an object that can be used to iterate through all the strings in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResult.IsSucceeded">
      <summary>Indicates whether the object contains valid results.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgExecCmdResultClass">
      <summary>Collection of strings returned by the ExecuteCommand.</summary>
      <remarks><para>This object is not creatable. It is returned by the ExecuteCommand method.</para></remarks>
    </member>
    <member name="M:AGI.STKUtil.AgExecCmdResultClass.Range(System.Int32,System.Int32)">
      <summary>Return the elements within the specified range.</summary>
      <param name="StartIndex"></param>
      <param name="StopIndex"></param>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResultClass.Count">
      <summary>Number of elements contained in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResultClass.Item">
      <summary>Gets the element at the specified index (0-based).</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResultClass._NewEnum">
      <summary>Returns an object that can be used to iterate through all the strings in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecCmdResultClass.IsSucceeded">
      <summary>Indicates whether the object contains valid results.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgExecCmdResult">
      <summary>Collection of strings returned by the ExecuteCommand.</summary>
      <remarks><para>This object is not creatable. It is returned by the ExecuteCommand method.</para></remarks>
    </member>
    <member name="M:AGI.STKUtil.IAgExecCmdResult.Range(System.Int32,System.Int32)">
      <summary>Return the elements within the specified range.</summary>
      <param name="StartIndex"></param>
      <param name="StopIndex"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgExecCmdResult.Count">
      <summary>Number of elements contained in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgExecCmdResult.Item">
      <summary>Gets the element at the specified index (0-based).</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgExecCmdResult._NewEnum">
      <summary>Returns an object that can be used to iterate through all the strings in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgExecCmdResult.IsSucceeded">
      <summary>Indicates whether the object contains valid results.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgExecMultiCmdResult">
      <summary>Collection of objects returned by the ExecuteMultipleCommands.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecMultiCmdResult.Count">
      <summary>Number of elements contained in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecMultiCmdResult.Item">
      <summary>Gets the element at the specified index (0-based).</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecMultiCmdResult._NewEnum">
      <summary>Returns an object that can be used to iterate through all the objects in the collection.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgExecMultiCmdResultClass">
      <summary>Collection of objects returned by the ExecuteMultipleCommands.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecMultiCmdResultClass.Count">
      <summary>Number of elements contained in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecMultiCmdResultClass.Item">
      <summary>Gets the element at the specified index (0-based).</summary>
    </member>
    <member name="P:AGI.STKUtil.AgExecMultiCmdResultClass._NewEnum">
      <summary>Returns an object that can be used to iterate through all the objects in the collection.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgExecMultiCmdResult">
      <summary>Collection of objects returned by the ExecuteMultipleCommands.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgExecMultiCmdResult.Count">
      <summary>Number of elements contained in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgExecMultiCmdResult.Item">
      <summary>Gets the element at the specified index (0-based).</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgExecMultiCmdResult._NewEnum">
      <summary>Returns an object that can be used to iterate through all the objects in the collection.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsUnit">
      <summary>Object that contains info on the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnit.FullName">
      <summary>Returns the fullname of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnit.Abbrv">
      <summary>Returns the abbreviation of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnit.Id">
      <summary>Returns the ID of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnit.Dimension">
      <summary>Returns the Dimension for this unit.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsUnitClass">
      <summary>Object that contains info on the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitClass.FullName">
      <summary>Returns the fullname of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitClass.Abbrv">
      <summary>Returns the abbreviation of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitClass.Id">
      <summary>Returns the ID of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitClass.Dimension">
      <summary>Returns the Dimension for this unit.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgUnitPrefsUnit">
      <summary>The hidden IAgUnitPrefsUnit interface.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsUnit.FullName">
      <summary>Returns the fullname of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsUnit.Abbrv">
      <summary>Returns the abbreviation of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsUnit.Id">
      <summary>Returns the ID of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsUnit.Dimension">
      <summary>Returns the Dimension for this unit.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgUnitPrefsDim">
      <summary>Provides info on a Dimension from the global unit table.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgUnitPrefsDim.SetCurrentUnit(System.String)">
      <summary><para>Method to set unit preferences.</para></summary>
      <param name="UnitAbbrv"><para>The unit abbreviation to set for the dimension.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDim.Id">
      <summary>Returns the ID of the dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDim.Name">
      <summary>Returns the current Dimension's full name.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDim.AvailableUnits">
      <summary>Returns collection of Units.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDim.CurrentUnit">
      <summary>Returns the current unit for this dimension.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgUnitPrefsUnitCollection">
      <summary>Provides access to the Unit collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsUnitCollection.Item">
      <summary>Returns the specific item in the collection given a unit identifier or an index.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsUnitCollection.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsUnitCollection._NewEnum">
      <summary>Returns an enumeration of AgUnitPrefsUnit.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgUnitPrefsUnit">
      <summary>Provides info about a unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsUnit.FullName">
      <summary>Returns the fullname of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsUnit.Abbrv">
      <summary>Returns the abbreviation of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsUnit.Id">
      <summary>Returns the ID of the unit.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsUnit.Dimension">
      <summary>Returns the Dimension for this unit.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsUnitCollection">
      <summary>Object that contains a collection of IAgUnitPrefsUnit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitCollection.Item">
      <summary>Returns the specific item in the collection given a unit identifier or an index.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitCollection.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitCollection._NewEnum">
      <summary>Returns an enumeration of AgUnitPrefsUnit.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsUnitCollectionClass">
      <summary>Object that contains a collection of IAgUnitPrefsUnit.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitCollectionClass.Item">
      <summary>Returns the specific item in the collection given a unit identifier or an index.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitCollectionClass.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsUnitCollectionClass._NewEnum">
      <summary>Returns an enumeration of AgUnitPrefsUnit.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsDim">
      <summary>Object that contains info on the Dimension.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDim.SetCurrentUnit(System.String)">
      <summary><para>Method to set unit preferences.</para></summary>
      <param name="UnitAbbrv"><para>The unit abbreviation to set for the dimension.</para></param>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDim.Id">
      <summary>Returns the ID of the dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDim.Name">
      <summary>Returns the current Dimension's full name.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDim.AvailableUnits">
      <summary>Returns collection of Units.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDim.CurrentUnit">
      <summary>Returns the current unit for this dimension.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsDimClass">
      <summary>Object that contains info on the Dimension.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDimClass.SetCurrentUnit(System.String)">
      <summary><para>Method to set unit preferences.</para></summary>
      <param name="UnitAbbrv"><para>The unit abbreviation to set for the dimension.</para></param>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimClass.Id">
      <summary>Returns the ID of the dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimClass.Name">
      <summary>Returns the current Dimension's full name.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimClass.AvailableUnits">
      <summary>Returns collection of Units.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimClass.CurrentUnit">
      <summary>Returns the current unit for this dimension.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgUnitPrefsDim">
      <summary>The hidden IAgUnitPrefsDim interface.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgUnitPrefsDim.SetCurrentUnit(System.String)">
      <summary><para>Method to set unit preferences.</para></summary>
      <param name="UnitAbbrv"><para>The unit abbreviation to set for the dimension.</para></param>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsDim.Id">
      <summary>Returns the ID of the dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsDim.Name">
      <summary>Returns the current Dimension's full name.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsDim.AvailableUnits">
      <summary>Returns collection of Units.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgUnitPrefsDim.CurrentUnit">
      <summary>Returns the current unit for this dimension.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsDimCollection">
      <summary>Object that contains a collection of dimensions.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDimCollection.SetCurrentUnit(System.String,System.String)">
      <summary><para>Method to set unit preferences.</para></summary>
      <param name="Dimension"><para>The dimension to set the current unit.</para></param>
      <param name="UnitAbbrv"><para>The unit abbreviation to set the current dimension's unit to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDimCollection.GetCurrentUnitAbbrv(System.Object)">
      <summary>Returns the Current Unit for a Dimension.</summary>
      <returns><para>Returns the current unit abbreviation for the given index.</para></returns>
      <param name="IndexOrDimName"><para>The index or dimension name</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDimCollection.ResetUnits">
      <summary>Resets the unitpreferences to the Default units</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollection.Item">
      <summary>Returns an IAgUnitPrefsDim given a Dimension name or an index.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollection.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollection.MissionElapsedTime">
      <summary>The MissionElapsedTime.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollection.JulianDateOffset">
      <summary>The JulianDateOffset.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollection._NewEnum">
      <summary>Returns a collection of IAgUnitPrefsDim.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgUnitPrefsDimCollectionClass">
      <summary>Object that contains a collection of dimensions.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDimCollectionClass.SetCurrentUnit(System.String,System.String)">
      <summary><para>Method to set unit preferences.</para></summary>
      <param name="Dimension"><para>The dimension to set the current unit.</para></param>
      <param name="UnitAbbrv"><para>The unit abbreviation to set the current dimension's unit to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDimCollectionClass.GetCurrentUnitAbbrv(System.Object)">
      <summary>Returns the Current Unit for a Dimension.</summary>
      <returns><para>Returns the current unit abbreviation for the given index.</para></returns>
      <param name="IndexOrDimName"><para>The index or dimension name</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgUnitPrefsDimCollectionClass.ResetUnits">
      <summary>Resets the unitpreferences to the Default units</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollectionClass.Item">
      <summary>Returns an IAgUnitPrefsDim given a Dimension name or an index.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollectionClass.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollectionClass.MissionElapsedTime">
      <summary>The MissionElapsedTime.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollectionClass.JulianDateOffset">
      <summary>The JulianDateOffset.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgUnitPrefsDimCollectionClass._NewEnum">
      <summary>Returns a collection of IAgUnitPrefsDim.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgUnitPrefsDimCollection">
      <summary>Provides accesses to the global unit table.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgUnitPrefsDimCollection.SetCurrentUnit(System.String,System.String)">
      <summary><para>Method to set unit preferences.</para></summary>
      <param name="Dimension"><para>The dimension to set the current unit.</para></param>
      <param name="UnitAbbrv"><para>The unit abbreviation to set the current dimension's unit to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgUnitPrefsDimCollection.GetCurrentUnitAbbrv(System.Object)">
      <summary>Returns the Current Unit for a Dimension.</summary>
      <returns><para>Returns the current unit abbreviation for the given index.</para></returns>
      <param name="IndexOrDimName"><para>The index or dimension name</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgUnitPrefsDimCollection.ResetUnits">
      <summary>Resets the unitpreferences to the Default units</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDimCollection.Item">
      <summary>Returns an IAgUnitPrefsDim given a Dimension name or an index.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDimCollection.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDimCollection.MissionElapsedTime">
      <summary>The MissionElapsedTime.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDimCollection.JulianDateOffset">
      <summary>The JulianDateOffset.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgUnitPrefsDimCollection._NewEnum">
      <summary>Returns a collection of IAgUnitPrefsDim.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgConversionUtility">
      <summary>Object that contains a unit conversion utility.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.ConvertQuantity(System.String,System.String,System.String,System.Double)">
      <summary>Converts the specified quantity value from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.ConvertDate(System.String,System.String,System.String)">
      <summary>Converts the specified date from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValue"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.ConvertQuantityArray(System.String,System.String,System.String,System.Array@)">
      <summary>Converts the specified quantity values from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="Values"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.ConvertDateArray(System.String,System.String,System.Array@)">
      <summary>Converts the specified dates from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValues"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewQuantity(System.String,System.String,System.Double)">
      <summary>Creates an IAgQuantity interface with the given dimension, unit and value</summary>
      <param name="Dimension"></param>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewDate(System.String,System.String)">
      <summary>Creates an IAgDate interface with the given unit and value</summary>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewPositionOnEarth">
      <summary>Creates an IAgPosition interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.ConvertPositionArray(AGI.STKUtil.AgEPositionType,System.Array@,AGI.STKUtil.AgEPositionType)">
      <summary>Converts the specified position values from a given position type to another position type.</summary>
      <param name="PositionType"></param>
      <param name="PositionArray"></param>
      <param name="ConvertTo"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewDirection">
      <summary>Creates an IAgDirection interface.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewOrientation">
      <summary>Creates an IAgOrientation interface.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewOrbitStateOnEarth">
      <summary>Creates an IAgOrbitState interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewPositionOnCB(System.String)">
      <summary>Creates an IAgPosition interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewOrbitStateOnCB(System.String)">
      <summary>Creates an IAgOrbitState interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.QueryDirectionCosineMatrix(AGI.STKUtil.IAgOrientation,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@)">
      <summary>Returns a Direction Cosine Matrix (DCM).</summary>
      <param name="InputOrientation"></param>
      <param name="pX"></param>
      <param name="pY"></param>
      <param name="pZ"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.QueryDirectionCosineMatrixArray(AGI.STKUtil.IAgOrientation)">
      <summary>Returns a Direction Cosine Matrix (DCM) as an array.</summary>
      <param name="InputOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewCartesian3Vector">
      <summary>Creates a cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewCartesian3VectorFromDirection(AGI.STKUtil.IAgDirection)">
      <summary>Converts the direction to cartesian vector.</summary>
      <param name="InputDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtility.NewCartesian3VectorFromPosition(AGI.STKUtil.IAgPosition)">
      <summary>Converts the position to cartesian vector.</summary>
      <param name="InputPosition"></param>
    </member>
    <member name="T:AGI.STKUtil.AgConversionUtilityClass">
      <summary>Object that contains a unit conversion utility.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.ConvertQuantity(System.String,System.String,System.String,System.Double)">
      <summary>Converts the specified quantity value from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.ConvertDate(System.String,System.String,System.String)">
      <summary>Converts the specified date from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValue"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.ConvertQuantityArray(System.String,System.String,System.String,System.Array@)">
      <summary>Converts the specified quantity values from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="Values"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.ConvertDateArray(System.String,System.String,System.Array@)">
      <summary>Converts the specified dates from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValues"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewQuantity(System.String,System.String,System.Double)">
      <summary>Creates an IAgQuantity interface with the given dimension, unit and value</summary>
      <param name="Dimension"></param>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewDate(System.String,System.String)">
      <summary>Creates an IAgDate interface with the given unit and value</summary>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewPositionOnEarth">
      <summary>Creates an IAgPosition interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.ConvertPositionArray(AGI.STKUtil.AgEPositionType,System.Array@,AGI.STKUtil.AgEPositionType)">
      <summary>Converts the specified position values from a given position type to another position type.</summary>
      <param name="PositionType"></param>
      <param name="PositionArray"></param>
      <param name="ConvertTo"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewDirection">
      <summary>Creates an IAgDirection interface.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewOrientation">
      <summary>Creates an IAgOrientation interface.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewOrbitStateOnEarth">
      <summary>Creates an IAgOrbitState interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewPositionOnCB(System.String)">
      <summary>Creates an IAgPosition interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewOrbitStateOnCB(System.String)">
      <summary>Creates an IAgOrbitState interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.QueryDirectionCosineMatrix(AGI.STKUtil.IAgOrientation,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@)">
      <summary>Returns a Direction Cosine Matrix (DCM).</summary>
      <param name="InputOrientation"></param>
      <param name="pX"></param>
      <param name="pY"></param>
      <param name="pZ"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.QueryDirectionCosineMatrixArray(AGI.STKUtil.IAgOrientation)">
      <summary>Returns a Direction Cosine Matrix (DCM) as an array.</summary>
      <param name="InputOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewCartesian3Vector">
      <summary>Creates a cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewCartesian3VectorFromDirection(AGI.STKUtil.IAgDirection)">
      <summary>Converts the direction to cartesian vector.</summary>
      <param name="InputDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgConversionUtilityClass.NewCartesian3VectorFromPosition(AGI.STKUtil.IAgPosition)">
      <summary>Converts the position to cartesian vector.</summary>
      <param name="InputPosition"></param>
    </member>
    <member name="T:AGI.STKUtil._IAgConversionUtility">
      <summary>Provides conversion utilities.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.ConvertQuantity(System.String,System.String,System.String,System.Double)">
      <summary>Converts the specified quantity value from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.ConvertDate(System.String,System.String,System.String)">
      <summary>Converts the specified date from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValue"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.ConvertQuantityArray(System.String,System.String,System.String,System.Array@)">
      <summary>Converts the specified quantity values from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="Values"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.ConvertDateArray(System.String,System.String,System.Array@)">
      <summary>Converts the specified dates from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValues"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewQuantity(System.String,System.String,System.Double)">
      <summary>Creates an IAgQuantity interface with the given dimension, unit and value</summary>
      <param name="Dimension"></param>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewDate(System.String,System.String)">
      <summary>Creates an IAgDate interface with the given unit and value</summary>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewPositionOnEarth">
      <summary>Creates an IAgPosition interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.ConvertPositionArray(AGI.STKUtil.AgEPositionType,System.Array@,AGI.STKUtil.AgEPositionType)">
      <summary>Converts the specified position values from a given position type to another position type.</summary>
      <param name="PositionType"></param>
      <param name="PositionArray"></param>
      <param name="ConvertTo"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewDirection">
      <summary>Creates an IAgDirection interface.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewOrientation">
      <summary>Creates an IAgOrientation interface.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewOrbitStateOnEarth">
      <summary>Creates an IAgOrbitState interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewPositionOnCB(System.String)">
      <summary>Creates an IAgPosition interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewOrbitStateOnCB(System.String)">
      <summary>Creates an IAgOrbitState interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.QueryDirectionCosineMatrix(AGI.STKUtil.IAgOrientation,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@)">
      <summary>Returns a Direction Cosine Matrix (DCM).</summary>
      <param name="InputOrientation"></param>
      <param name="pX"></param>
      <param name="pY"></param>
      <param name="pZ"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.QueryDirectionCosineMatrixArray(AGI.STKUtil.IAgOrientation)">
      <summary>Returns a Direction Cosine Matrix (DCM) as an array.</summary>
      <param name="InputOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewCartesian3Vector">
      <summary>Creates a cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewCartesian3VectorFromDirection(AGI.STKUtil.IAgDirection)">
      <summary>Converts the direction to cartesian vector.</summary>
      <param name="InputDirection"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgConversionUtility.NewCartesian3VectorFromPosition(AGI.STKUtil.IAgPosition)">
      <summary>Converts the position to cartesian vector.</summary>
      <param name="InputPosition"></param>
    </member>
    <member name="T:AGI.STKUtil.IAgQuantity">
      <summary>Provides helper methods for a quantity.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgQuantity.ConvertToUnit(System.String)">
      <summary>Changes the value in this quantity to the specified unit.</summary>
      <param name="UnitAbbrv"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgQuantity.Add(AGI.STKUtil.IAgQuantity)">
      <summary>Adds the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgQuantity.Subtract(AGI.STKUtil.IAgQuantity)">
      <summary>Subtracts the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgQuantity.MultiplyQty(AGI.STKUtil.IAgQuantity)">
      <summary>Multiplies the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgQuantity.DivideQty(AGI.STKUtil.IAgQuantity)">
      <summary>Divides the value from the IAgQuantity interface to this interface. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgQuantity.Dimension">
      <summary>Gets the name of the dimension</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgQuantity.Unit">
      <summary>The current Unit abbreviation.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgQuantity.Value">
      <summary>The current value.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgDate">
      <summary>Provides helper methods for a date.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDate.Format(System.String)">
      <summary>Returns the value of the date given the unit.</summary>
      <param name="Unit"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDate.SetDate(System.String,System.String)">
      <summary>Sets this date with the given date value and unit type.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDate.Add(System.String,System.Double)">
      <summary>Adds the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDate.Subtract(System.String,System.Double)">
      <summary>Subtracts the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDate.Span(AGI.STKUtil.IAgDate)">
      <summary>Subtracts the value from the IAgDate interface and returns an IAgQuantity.</summary>
      <param name="Date"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgDate.OLEDate">
      <summary>The current time in OLE DATE Format.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDate.WholeDays">
      <summary>The Julian Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDate.SecIntoDay">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDate.WholeDaysUTC">
      <summary>The UTC Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDate.SecIntoDayUTC">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgPosition">
      <summary>IAgPosition provides access to the position of the object</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPosition.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgPosition.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPosition.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEPositionType">
      <summary>Facility/place/target position types.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPositionType.eCartesian">
      <summary>Cartesian: position specified in terms of the X, Y and Z components of the object's position vector, where the Z-axis points to the North pole, and the X-axis crosses 0 degrees latitude/0 degrees longitude.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPositionType.eCylindrical">
      <summary>Cylindrical: position specified in terms of radius (polar), longitude (measured in degrees from -360.0 degrees to +360.0 degrees), and the Z component of the object's position vector.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPositionType.eGeocentric">
      <summary>Geocentric: position specified in terms of latitude (spherical latitude of the sub-point on the surface of the Earth), longitude and altitude.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPositionType.eGeodetic">
      <summary>Geodetic: position specified in terms of latitude (angle between the normal to the reference ellipsoid and the equatorial plane), longitude and altitude.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPositionType.eSpherical">
      <summary>Spherical: position specified in terms of latitude (spherical latitude of the sub-point on the surface of the Earth), longitude and radius (distance of the object from the center of the Earth).</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPositionType.ePlanetocentric">
      <summary>Planetocentric: position specified in terms of latitude (spherical latitude of the sub-point on the surface of the Earth), longitude and altitude.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPositionType.ePlanetodetic">
      <summary>Planetodetic: position specified in terms of latitude (angle between the normal to the reference ellipsoid and the equatorial plane), longitude and altitude.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgDirection">
      <summary>Interface to set and retrieve direction options for aligned and constrained vectors.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirection.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirection.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEDirectionType">
      <summary>Direction options for aligned and constrained vectors.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEDirectionType.eDirEuler">
      <summary>Euler B and C angles.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEDirectionType.eDirPR">
      <summary>Pitch and Roll angles.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEDirectionType.eDirRADec">
      <summary>Spherical elements: Right Ascension and Declination.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEDirectionType.eDirXYZ">
      <summary>Cartesian elements.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEEulerDirectionSequence">
      <summary>Euler direction sequences.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerDirectionSequence.e12">
      <summary>12 sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerDirectionSequence.e21">
      <summary>21 sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerDirectionSequence.e31">
      <summary>31 sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerDirectionSequence.e32">
      <summary>32 sequence.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEPRSequence">
      <summary>Pitch-Roll (PR) direction sequences.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPRSequence.ePR">
      <summary>PR sequence.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgOrientation">
      <summary>Interface to set and retrieve the orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientation.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientation.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEOrientationType">
      <summary>Orientation methods.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrientationType.eAzEl">
      <summary>AzEl (azimuth-elevation) method.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrientationType.eEulerAngles">
      <summary>Euler angles method.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrientationType.eQuaternion">
      <summary>Quaternion method.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEOrientationType.eYPRAngles">
      <summary>YPR (yaw-pitch-roll) method.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEAzElAboutBoresight">
      <summary>About Boresight options for AzEl orientation method.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEAzElAboutBoresight.eAzElAboutBoresightHold">
      <summary>Hold: rotation about the Y axis followed by rotation about the new X-axis.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEAzElAboutBoresight.eAzElAboutBoresightRotate">
      <summary>Rotate: rotation about the sensor's or antenna's Z axis by the azimuth angle, followed by rotation about the new Y axis by 90 degrees minus the elevation angle.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEEulerOrientationSequence">
      <summary>Euler rotation sequence options:</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e121">
      <summary>121 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e123">
      <summary>123 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e131">
      <summary>131 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e132">
      <summary>132 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e212">
      <summary>212 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e213">
      <summary>213 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e231">
      <summary>231 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e232">
      <summary>232 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e312">
      <summary>312 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e313">
      <summary>313 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e321">
      <summary>321 rotation.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEEulerOrientationSequence.e323">
      <summary>323 rotation.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEYPRAnglesSequence">
      <summary>Yaw-Pitch-Roll (YPR) sequences.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEYPRAnglesSequence.ePRY">
      <summary>PRY sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEYPRAnglesSequence.ePYR">
      <summary>PYR sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEYPRAnglesSequence.eRPY">
      <summary>RPY sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEYPRAnglesSequence.eRYP">
      <summary>RYP sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEYPRAnglesSequence.eYPR">
      <summary>YPR sequence.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEYPRAnglesSequence.eYRP">
      <summary>YRP sequence.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgCartesian3Vector">
      <summary>Represents a cartesian 3-D vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian3Vector.Get(.double@,.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian3Vector.Set(System.Double,System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian3Vector.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian3Vector.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian3Vector.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian3Vector.Z">
      <summary>Z coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgConversionUtility">
      <summary>Provides conversion utilities.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.ConvertQuantity(System.String,System.String,System.String,System.Double)">
      <summary>Converts the specified quantity value from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValue"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.ConvertDate(System.String,System.String,System.String)">
      <summary>Converts the specified date from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValue"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.ConvertQuantityArray(System.String,System.String,System.String,System.Array@)">
      <summary>Converts the specified quantity values from a given unit to another unit.</summary>
      <param name="DimensionName"></param>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="QuantityValues"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.ConvertDateArray(System.String,System.String,System.Array@)">
      <summary>Converts the specified dates from a given unit to another unit.</summary>
      <param name="FromUnit"></param>
      <param name="ToUnit"></param>
      <param name="FromValues"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewQuantity(System.String,System.String,System.Double)">
      <summary>Creates an IAgQuantity interface with the given dimension, unit and value</summary>
      <param name="Dimension"></param>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewDate(System.String,System.String)">
      <summary>Creates an IAgDate interface with the given unit and value</summary>
      <param name="UnitAbbrv"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewPositionOnEarth">
      <summary>Creates an IAgPosition interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.ConvertPositionArray(AGI.STKUtil.AgEPositionType,System.Array@,AGI.STKUtil.AgEPositionType)">
      <summary>Converts the specified position values from a given position type to another position type.</summary>
      <param name="PositionType"></param>
      <param name="PositionArray"></param>
      <param name="ConvertTo"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewDirection">
      <summary>Creates an IAgDirection interface.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewOrientation">
      <summary>Creates an IAgOrientation interface.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewOrbitStateOnEarth">
      <summary>Creates an IAgOrbitState interface with earth as it's central body.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewPositionOnCB(System.String)">
      <summary>Creates an IAgPosition interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewOrbitStateOnCB(System.String)">
      <summary>Creates an IAgOrbitState interface using the supplied central body.</summary>
      <param name="CentralBodyName"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.QueryDirectionCosineMatrix(AGI.STKUtil.IAgOrientation,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@,AGI.STKUtil.IAgCartesian3Vector*@)">
      <summary>Returns a Direction Cosine Matrix (DCM).</summary>
      <param name="InputOrientation"></param>
      <param name="pX"></param>
      <param name="pY"></param>
      <param name="pZ"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.QueryDirectionCosineMatrixArray(AGI.STKUtil.IAgOrientation)">
      <summary>Returns a Direction Cosine Matrix (DCM) as an array.</summary>
      <param name="InputOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewCartesian3Vector">
      <summary>Creates a cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewCartesian3VectorFromDirection(AGI.STKUtil.IAgDirection)">
      <summary>Converts the direction to cartesian vector.</summary>
      <param name="InputDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgConversionUtility.NewCartesian3VectorFromPosition(AGI.STKUtil.IAgPosition)">
      <summary>Converts the position to cartesian vector.</summary>
      <param name="InputPosition"></param>
    </member>
    <member name="T:AGI.STKUtil.AgQuantity">
      <summary>Object that contains a quantity.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgQuantity.ConvertToUnit(System.String)">
      <summary>The current Unit abbreviation.</summary>
      <param name="UnitAbbrv"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantity.Add(AGI.STKUtil.IAgQuantity)">
      <summary>Adds the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantity.Subtract(AGI.STKUtil.IAgQuantity)">
      <summary>Subtracts the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantity.MultiplyQty(AGI.STKUtil.IAgQuantity)">
      <summary>Multiplies the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantity.DivideQty(AGI.STKUtil.IAgQuantity)">
      <summary>Divides the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="P:AGI.STKUtil.AgQuantity.Dimension">
      <summary>Gets the name of the dimension</summary>
    </member>
    <member name="P:AGI.STKUtil.AgQuantity.Unit">
      <summary>The current Unit abbreviation.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgQuantity.Value">
      <summary>The current value. Changes depending on the current unit.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgQuantityClass">
      <summary>Object that contains a quantity.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgQuantityClass.ConvertToUnit(System.String)">
      <summary>The current Unit abbreviation.</summary>
      <param name="UnitAbbrv"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantityClass.Add(AGI.STKUtil.IAgQuantity)">
      <summary>Adds the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantityClass.Subtract(AGI.STKUtil.IAgQuantity)">
      <summary>Subtracts the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantityClass.MultiplyQty(AGI.STKUtil.IAgQuantity)">
      <summary>Multiplies the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil.AgQuantityClass.DivideQty(AGI.STKUtil.IAgQuantity)">
      <summary>Divides the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="P:AGI.STKUtil.AgQuantityClass.Dimension">
      <summary>Gets the name of the dimension</summary>
    </member>
    <member name="P:AGI.STKUtil.AgQuantityClass.Unit">
      <summary>The current Unit abbreviation.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgQuantityClass.Value">
      <summary>The current value. Changes depending on the current unit.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgQuantity">
      <summary>Provides helper methods for a quantity.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgQuantity.ConvertToUnit(System.String)">
      <summary>The current Unit abbreviation.</summary>
      <param name="UnitAbbrv"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgQuantity.Add(AGI.STKUtil.IAgQuantity)">
      <summary>Adds the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgQuantity.Subtract(AGI.STKUtil.IAgQuantity)">
      <summary>Subtracts the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgQuantity.MultiplyQty(AGI.STKUtil.IAgQuantity)">
      <summary>Multiplies the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgQuantity.DivideQty(AGI.STKUtil.IAgQuantity)">
      <summary>Divides the value from the IAgQuantity interface to this interface. Returns a new IAgQuantity. The dimensions must be similar.</summary>
      <param name="Quantity"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgQuantity.Dimension">
      <summary>Gets the name of the dimension</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgQuantity.Unit">
      <summary>The current Unit abbreviation.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgQuantity.Value">
      <summary>The current value. Changes depending on the current unit.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDate">
      <summary>Object that contains a date.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDate.Format(System.String)">
      <summary>Returns the value of the date given the unit.</summary>
      <param name="Unit"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDate.SetDate(System.String,System.String)">
      <summary>Sets this date with the given date value and unit type.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDate.Add(System.String,System.Double)">
      <summary>Adds the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDate.Subtract(System.String,System.Double)">
      <summary>Subtracts the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDate.Span(AGI.STKUtil.IAgDate)">
      <summary>Subtracts the value from the IAgDate interface and returns an IAgQuantity.</summary>
      <param name="Date"></param>
    </member>
    <member name="P:AGI.STKUtil.AgDate.OLEDate">
      <summary>The current time in OLE DATE Format.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDate.WholeDays">
      <summary>The Julian Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDate.SecIntoDay">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDate.WholeDaysUTC">
      <summary>The UTC Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDate.SecIntoDayUTC">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDateClass">
      <summary>Object that contains a date.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDateClass.Format(System.String)">
      <summary>Returns the value of the date given the unit.</summary>
      <param name="Unit"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDateClass.SetDate(System.String,System.String)">
      <summary>Sets this date with the given date value and unit type.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDateClass.Add(System.String,System.Double)">
      <summary>Adds the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDateClass.Subtract(System.String,System.Double)">
      <summary>Subtracts the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDateClass.Span(AGI.STKUtil.IAgDate)">
      <summary>Subtracts the value from the IAgDate interface and returns an IAgQuantity.</summary>
      <param name="Date"></param>
    </member>
    <member name="P:AGI.STKUtil.AgDateClass.OLEDate">
      <summary>The current time in OLE DATE Format.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDateClass.WholeDays">
      <summary>The Julian Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDateClass.SecIntoDay">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDateClass.WholeDaysUTC">
      <summary>The UTC Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDateClass.SecIntoDayUTC">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgDate">
      <summary>Provides helper methods for a date.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDate.Format(System.String)">
      <summary>Returns the value of the date given the unit.</summary>
      <param name="Unit"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDate.SetDate(System.String,System.String)">
      <summary>Sets this date with the given date value and unit type.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDate.Add(System.String,System.Double)">
      <summary>Adds the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDate.Subtract(System.String,System.Double)">
      <summary>Subtracts the value in the given unit and returns a new date interface.</summary>
      <param name="Unit"></param>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDate.Span(AGI.STKUtil.IAgDate)">
      <summary>Subtracts the value from the IAgDate interface and returns an IAgQuantity.</summary>
      <param name="Date"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgDate.OLEDate">
      <summary>The current time in OLE DATE Format.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDate.WholeDays">
      <summary>The Julian Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDate.SecIntoDay">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDate.WholeDaysUTC">
      <summary>The UTC Day Number of the date of interest.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDate.SecIntoDayUTC">
      <summary>Contains values between 0.0 and 86400 with the exception of when the date is inside a leap second in which case the SecIntoDay can become as large as 86401.0</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPosition">
      <summary>The Position class.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPosition.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.AgPosition.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPosition.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPositionClass">
      <summary>The Position class.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.AgPositionClass.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.AgPositionClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPositionClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgPosition">
      <summary>IAgPosition provides access to the position of the object</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPosition.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil._IAgPosition.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPosition.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgLocationData">
      <summary>Base interface IAgLocationData. IAgPosition derives from this interface.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCartesian">
      <summary>Class used to access a position using Cartesian Coordinates.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignCartesian instead.</summary>
      <param name="X"><para>X value.</para></param>
      <param name="Y"><para>Y value.</para></param>
      <param name="Z"><para>Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian.X">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian.Y">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian.Z">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCartesianClass">
      <summary>Class used to access a position using Cartesian Coordinates.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignCartesian instead.</summary>
      <param name="X"><para>X value.</para></param>
      <param name="Y"><para>Y value.</para></param>
      <param name="Z"><para>Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesianClass.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesianClass.X">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesianClass.Y">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesianClass.Z">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesianClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesianClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCartesian">
      <summary>IAgCartesian Interface used to access a position using Cartesian Coordinates</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignCartesian instead.</summary>
      <param name="X"><para>X value.</para></param>
      <param name="Y"><para>Y value.</para></param>
      <param name="Z"><para>Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian.X">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian.Y">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian.Z">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgCartesian">
      <summary>IAgCartesian Interface used to access a position using Cartesian Coordinates</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignCartesian instead.</summary>
      <param name="X"><para>X value.</para></param>
      <param name="Y"><para>Y value.</para></param>
      <param name="Z"><para>Z value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian.X">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian.Y">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian.Z">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgGeodetic">
      <summary>Class defining Geodetic position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeodetic instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodetic.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodetic.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodetic.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodetic.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodetic.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodetic.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgGeodeticClass">
      <summary>Class defining Geodetic position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeodetic instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeodeticClass.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodeticClass.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodeticClass.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodeticClass.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodeticClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeodeticClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgGeodetic">
      <summary>Sets the position using Geodetic properties.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeodetic instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeodetic.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeodetic.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeodetic.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeodetic.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeodetic.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeodetic.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgGeodetic">
      <summary>IAgGeodetic sets the position using Geodetic properties.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeodetic instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgGeodetic.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgGeodetic.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgGeodetic.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeodetic.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgGeodetic.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgGeodetic.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgGeocentric">
      <summary>Class defining Geocentric position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeocentric instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentric.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentric.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentric.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentric.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentric.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentric.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgGeocentricClass">
      <summary>Class defining Geocentric position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeocentric instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgGeocentricClass.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentricClass.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentricClass.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentricClass.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentricClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgGeocentricClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgGeocentric">
      <summary>Geocentric Position Type.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeocentric instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgGeocentric.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeocentric.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeocentric.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeocentric.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeocentric.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgGeocentric.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgGeocentric">
      <summary>Geocentric Position Type.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignGeocentric instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Alt"><para>The altitude value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgGeocentric.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgGeocentric.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgGeocentric.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgGeocentric.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgGeocentric.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgGeocentric.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPlanetodetic">
      <summary>Class defining Planetodetic position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryPlanetocentricArray">
      <summary>Returns the Geocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryPlanetodeticArray">
      <summary>Returns the Geodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodetic.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodetic.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodetic.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodetic.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodetic.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodetic.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPlanetodeticClass">
      <summary>Class defining Planetodetic position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryPlanetocentricArray">
      <summary>Returns the Geocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryPlanetodeticArray">
      <summary>Returns the Geodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetodeticClass.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodeticClass.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodeticClass.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodeticClass.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodeticClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetodeticClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgPlanetodetic">
      <summary>IAgPlanetodetic sets the position using Planetodetic properties.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryPlanetocentricArray">
      <summary>Returns the Geocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryPlanetodeticArray">
      <summary>Returns the Geodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetodetic.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetodetic.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetodetic.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetodetic.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetodetic.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetodetic.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgPlanetodetic">
      <summary>IAgPlanetodetic sets the position using Planetodetic properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetodetic.Lat">
      <summary>Latitude. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetodetic.Lon">
      <summary>Longitude. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetodetic.Alt">
      <summary>Altitude. Dimension depends on context.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetodetic.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetodetic.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetodetic.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPlanetocentric">
      <summary>Class defining Planetocentric position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentric.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentric.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentric.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentric.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentric.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentric.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPlanetocentricClass">
      <summary>Class defining Planetocentric position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPlanetocentricClass.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentricClass.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentricClass.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentricClass.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentricClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPlanetocentricClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgPlanetocentric">
      <summary>Planetocentric Position Type.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPlanetocentric.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetocentric.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetocentric.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetocentric.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetocentric.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPlanetocentric.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgPlanetocentric">
      <summary>Planetocentric Position Type.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetocentric.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetocentric.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetocentric.Alt">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPlanetocentric.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetocentric.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPlanetocentric.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgSpherical">
      <summary>Class defining spherical position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignSpherical instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Radius"><para>The radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSpherical.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSpherical.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSpherical.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSpherical.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSpherical.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSpherical.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgSphericalClass">
      <summary>Class defining spherical position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignSpherical instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Radius"><para>The radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgSphericalClass.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSphericalClass.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSphericalClass.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSphericalClass.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSphericalClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgSphericalClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgSpherical">
      <summary>Spherical Position Type.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignSpherical instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Radius"><para>The radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgSpherical.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgSpherical.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgSpherical.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgSpherical.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgSpherical.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgSpherical.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgSpherical">
      <summary>Spherical Position Type.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.SetValues(System.Object,System.Object,System.Double)">
      <summary>This property is deprecated. Use AssignSpherical instead.</summary>
      <param name="Lat"><para>The latitude value.</para></param>
      <param name="Lon"><para>The longitude value.</para></param>
      <param name="Radius"><para>The radius value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgSpherical.Lat">
      <summary>Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgSpherical.Lon">
      <summary>Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgSpherical.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgSpherical.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgSpherical.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgSpherical.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCylindrical">
      <summary>Class defining cylindrical position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.SetValues(System.Double,System.Double,System.Object)">
      <summary>This property is deprecated. Use AssignCylindrical instead.</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindrical.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindrical.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindrical.Z">
      <summary>Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindrical.Lon">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindrical.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindrical.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCylindricalClass">
      <summary>Class defining cylindrical position.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.SetValues(System.Double,System.Double,System.Object)">
      <summary>This property is deprecated. Use AssignCylindrical instead.</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCylindricalClass.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindricalClass.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindricalClass.Z">
      <summary>Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindricalClass.Lon">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindricalClass.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCylindricalClass.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCylindrical">
      <summary>Cylindrical Position Type.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.SetValues(System.Double,System.Double,System.Object)">
      <summary>This property is deprecated. Use AssignCylindrical instead.</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Z"></param>
      <param name="Lon"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Alt"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"></param>
      <param name="Lon"></param>
      <param name="Radius"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"></param>
      <param name="Lon"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryPlanetocentricArray">
      <summary>Returns the Planetocentric elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryPlanetodeticArray">
      <summary>Returns the Planetodetic elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QuerySphericalArray">
      <summary>Returns the Spherical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryCylindricalArray">
      <summary>Returns the Cylindrical elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCylindrical.QueryCartesianArray">
      <summary>Returns the Cartesian elements as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCylindrical.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCylindrical.Z">
      <summary>Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCylindrical.Lon">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCylindrical.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCylindrical.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgCylindrical">
      <summary>Cylindrical Position Type.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.SetValues(System.Double,System.Double,System.Object)">
      <summary>This property is deprecated. Use AssignCylindrical instead.</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgCylindrical.Radius">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCylindrical.Z">
      <summary>Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCylindrical.Lon">
      <summary>Dimension depends on context.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.ConvertTo(AGI.STKUtil.AgEPositionType)">
      <summary>Changes the position coordinates to type specified.</summary>
      <returns><para>IAgPosition Type</para></returns>
      <param name="Type"><para>The type to convert to.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.Assign(AGI.STKUtil.IAgPosition)">
      <summary>This assigns the coordinates into the system.</summary>
      <param name="pPosition"><para>The IAgPosition type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.AssignGeocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geocentric representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.AssignGeodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Geodetic representation.</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.AssignSpherical(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.AssignCylindrical(System.Double,System.Double,System.Object)">
      <summary>Helper method to assign the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
      <param name="Lon"><para>The Lon value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.AssignCartesian(System.Double,System.Double,System.Double)">
      <summary>Helper method to assign the position using the Cartesian representation</summary>
      <param name="X"><para>The X Coordinate.</para></param>
      <param name="Y"><para>The Y Coordinate.</para></param>
      <param name="Z"><para>The Z Coordinate.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.AssignPlanetocentric(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.AssignPlanetodetic(System.Object,System.Object,System.Double)">
      <summary>Helper method to assign the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryPlanetocentric(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetocentric representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryPlanetodetic(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Planetodetic representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Alt"><para>The Altitude value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QuerySpherical(System.Object@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Spherical representation</summary>
      <param name="Lat"><para>The Latitude value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Radius"><para>The Radius value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryCylindrical(.double@,System.Object@,.double@)">
      <summary>Helper method to get the position using the Cylindrical representation</summary>
      <param name="Radius"><para>The Radius value.</para></param>
      <param name="Lon"><para>The Longitude value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryCartesian(.double@,.double@,.double@)">
      <summary>Helper method to get the position using the Cartesian representation</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryPlanetocentricArray">
      <summary><para>This method is similar to QueryPlanetocentric but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryPlanetodeticArray">
      <summary><para>This method is similar to QueryPlanetodetic but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Altitude(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QuerySphericalArray">
      <summary><para>This method is similar to QuerySpherical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Latitude(index 0), Longitude(index 1) and Radius(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryCylindricalArray">
      <summary><para>This method is similar to QueryCylindrical but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order Radius(index 0), Lon(index 1) and Z(index 2).</para></summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCylindrical.QueryCartesianArray">
      <summary><para>This method is similar to QueryCartesian but can be used by earlybound(c#, vb.net...) and latebound(scripting languages) clients. The array returns the values in the order X(index 0), Y(index 1) and Z(index 2).</para></summary>
      <returns><para>A one dimensional array containing three values X, Y and Z.</para></returns>
    </member>
    <member name="P:AGI.STKUtil.IAgCylindrical.PosType">
      <summary>Gets the type of position currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCylindrical.CentralBodyName">
      <summary>Gets the central body.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirection">
      <summary>Class defining direction options for aligned and constrained vectors.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirection.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirection.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionClass">
      <summary>Class defining direction options for aligned and constrained vectors.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionClass.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionClass.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgDirection">
      <summary>The hidden interface for IAgDirection</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirection.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirection.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionEuler">
      <summary>Euler direction sequence.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.SetValues(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>This property is deprecated. Use AssignEuler instead.</summary>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEuler.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEuler.B">
      <summary>Euler B angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEuler.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEuler.Sequence">
      <summary>Euler direction sequence. Must be set before B,C values. Otherwise the B,C values will converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEuler.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionEulerClass">
      <summary>Euler direction sequence.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.SetValues(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>This property is deprecated. Use AssignEuler instead.</summary>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionEulerClass.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEulerClass.B">
      <summary>Euler B angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEulerClass.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEulerClass.Sequence">
      <summary>Euler direction sequence. Must be set before B,C values. Otherwise the B,C values will converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionEulerClass.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgDirectionEuler">
      <summary>The hidden interface for IAgDirectionEuler</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.SetValues(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>This property is deprecated. Use AssignEuler instead.</summary>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionEuler.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionEuler.B">
      <summary>Euler B angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionEuler.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionEuler.Sequence">
      <summary>Euler direction sequence. Must be set before B,C values. Otherwise the B,C values will converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionEuler.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgDirectionEuler">
      <summary>Interface for Euler direction sequence.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.SetValues(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>This property is deprecated. Use AssignEuler instead.</summary>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionEuler.B">
      <summary>Euler B angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionEuler.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionEuler.Sequence">
      <summary>Euler direction sequence.  Must be set before B,C values. Otherwise the B,C values will converted to the Sequence specified.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionEuler.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionEuler.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionPR">
      <summary>Pitch-Roll (PR) direction sequence.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignPR instead.</summary>
      <param name="Pitch"><para>The pitch value.</para></param>
      <param name="Roll"><para>The roll value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPR.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPR.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPR.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPR.Sequence">
      <summary>PR direction sequence. Must be set before Pitch,Roll values. Otherwise the current Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPR.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionPRClass">
      <summary>Pitch-Roll (PR) direction sequence.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignPR instead.</summary>
      <param name="Pitch"><para>The pitch value.</para></param>
      <param name="Roll"><para>The roll value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionPRClass.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPRClass.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPRClass.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPRClass.Sequence">
      <summary>PR direction sequence. Must be set before Pitch,Roll values. Otherwise the current Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionPRClass.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgDirectionPR">
      <summary>The hidden interface for IAgDirectionPR</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignPR instead.</summary>
      <param name="Pitch"><para>The pitch value.</para></param>
      <param name="Roll"><para>The roll value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionPR.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionPR.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionPR.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionPR.Sequence">
      <summary>PR direction sequence. Must be set before Pitch,Roll values. Otherwise the current Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionPR.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgDirectionPR">
      <summary>Interface for Pitch-Roll (PR) direction sequence.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignPR instead.</summary>
      <param name="Pitch"><para>The pitch value.</para></param>
      <param name="Roll"><para>The roll value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionPR.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionPR.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionPR.Sequence">
      <summary>PR direction sequence. Must be set before Pitch,Roll values. Otherwise the current Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionPR.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionPR.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionRADec">
      <summary>Spherical direction (Right Ascension and Declination).</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignRADec instead.</summary>
      <param name="RA"><para>Right ascension.</para></param>
      <param name="Dec"><para>Declination.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADec.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADec.Dec">
      <summary>Declination: angle above the x-y plane. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADec.RA">
      <summary>Right Ascension: angle in x-y plane from x towards y. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADec.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADec.Magnitude">
      <summary>A unitless value that represents magnitude.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionRADecClass">
      <summary>Spherical direction (Right Ascension and Declination).</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignRADec instead.</summary>
      <param name="RA"><para>Right ascension.</para></param>
      <param name="Dec"><para>Declination.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionRADecClass.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADecClass.Dec">
      <summary>Declination: angle above the x-y plane. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADecClass.RA">
      <summary>Right Ascension: angle in x-y plane from x towards y. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADecClass.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionRADecClass.Magnitude">
      <summary>A unitless value that represents magnitude.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgDirectionRADec">
      <summary>The hidden interface for IAgDirectionRADec</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignRADec instead.</summary>
      <param name="RA"><para>Right ascension.</para></param>
      <param name="Dec"><para>Declination.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionRADec.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionRADec.Dec">
      <summary>Declination: angle above the x-y plane. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionRADec.RA">
      <summary>Right Ascension: angle in x-y plane from x towards y. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionRADec.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionRADec.Magnitude">
      <summary>A unitless value that represents magnitude.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgDirectionRADec">
      <summary>Interface for Spherical direction (Right Ascension and Declination).</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.SetValues(System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignRADec instead.</summary>
      <param name="RA"><para>Right ascension.</para></param>
      <param name="Dec"><para>Declination.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionRADec.Dec">
      <summary>Declination: angle above the x-y plane. Uses Latitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionRADec.RA">
      <summary>Right Ascension: angle in x-y plane from x towards y. Uses Longitude Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionRADec.Magnitude">
      <summary>A unitless value that represents magnitude.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionRADec.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionRADec.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionXYZ">
      <summary>Cartesian direction.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignXYZ instead.</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZ.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZ.X">
      <summary>X component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZ.Y">
      <summary>Y component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZ.Z">
      <summary>Z component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZ.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDirectionXYZClass">
      <summary>Cartesian direction.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignXYZ instead.</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDirectionXYZClass.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZClass.X">
      <summary>X component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZClass.Y">
      <summary>Y component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZClass.Z">
      <summary>Z component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDirectionXYZClass.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgDirectionXYZ">
      <summary>The hidden interface for IAgDirectionXYZ</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignXYZ instead.</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgDirectionXYZ.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionXYZ.X">
      <summary>X component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionXYZ.Y">
      <summary>Y component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionXYZ.Z">
      <summary>Z component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgDirectionXYZ.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgDirectionXYZ">
      <summary>Interface for Cartesian direction.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.SetValues(System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignXYZ instead.</summary>
      <param name="X"><para>The X value.</para></param>
      <param name="Y"><para>The Y value.</para></param>
      <param name="Z"><para>The Z value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionXYZ.X">
      <summary>X component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionXYZ.Y">
      <summary>Y component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionXYZ.Z">
      <summary>Z component. Dimensionless</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.ConvertTo(AGI.STKUtil.AgEDirectionType)">
      <summary>Method to changes the direction to the type specified.<para>Converts to the specified enumeration type. i.e. eDirEuler converts to Euler direction and returns an IAgDirectionEuler interface.</para></summary>
      <returns><para>IAgDirection type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.Assign(AGI.STKUtil.IAgDirection)">
      <summary>Assign a new direction.</summary>
      <param name="pDirection"><para>The direction to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.AssignEuler(System.Object,System.Object,AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Helper method to set direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="B"></param>
      <param name="C"></param>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.AssignPR(System.Object,System.Object)">
      <summary>Helper method to set direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.AssignRADec(System.Object,System.Object)">
      <summary>Helper method to set direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.AssignXYZ(System.Double,System.Double,System.Double)">
      <summary>Helper method to set direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryEuler(AGI.STKUtil.AgEEulerDirectionSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Euler representation. Params B and C use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryPR(AGI.STKUtil.AgEPRSequence,System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Pitch Roll representation. Pitch and Roll use Angle Dimension.</summary>
      <param name="Sequence"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryRADec(System.Object@,System.Object@)">
      <summary>Helper method to get direction using the Right Ascension and Declination representation. Param Dec uses Latitude. Param RA uses Longitude.</summary>
      <param name="RA"></param>
      <param name="Dec"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryXYZ(.double@,.double@,.double@)">
      <summary>Helper method to get direction using the Cartesian representation. Params X, Y and Z are dimensionless.</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryEulerArray(AGI.STKUtil.AgEEulerDirectionSequence)">
      <summary>Returns the Euler elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryPRArray(AGI.STKUtil.AgEPRSequence)">
      <summary>Returns the PR elements in an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryRADecArray">
      <summary>Returns the RADec elements in an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDirectionXYZ.QueryXYZArray">
      <summary>Returns the XYZ elements in an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDirectionXYZ.DirectionType">
      <summary>Returns the type of direction currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientation">
      <summary>Class defining the orientation of an orbit.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientation.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientation.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationClass">
      <summary>Class defining the orientation of an orbit.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgOrientation">
      <summary>The hidden interface for IAgOrientation</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientation.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientation.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationAzEl">
      <summary>AzEl orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.SetValues(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>This property is deprecated. Use AssignAzEl instead.</summary>
      <param name="Azimuth"><para>The azimuth value.</para></param>
      <param name="Elevation"><para>The elevation value.</para></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzEl.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzEl.Azimuth">
      <summary>Measured in the XY plane of the parent reference frame about its Z axis in the right-handed sense for both vehicle-based sensors and facility-based sensors. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzEl.Elevation">
      <summary>Defined as the angle between the XY plane of the parent reference frame and the sensor or antenna boresight measured toward the positive Z axis. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzEl.AboutBoresight">
      <summary>Determines orientation of the X and Y axes with respect to the parent's reference frame.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzEl.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationAzElClass">
      <summary>AzEl orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.SetValues(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>This property is deprecated. Use AssignAzEl instead.</summary>
      <param name="Azimuth"><para>The azimuth value.</para></param>
      <param name="Elevation"><para>The elevation value.</para></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationAzElClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzElClass.Azimuth">
      <summary>Measured in the XY plane of the parent reference frame about its Z axis in the right-handed sense for both vehicle-based sensors and facility-based sensors. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzElClass.Elevation">
      <summary>Defined as the angle between the XY plane of the parent reference frame and the sensor or antenna boresight measured toward the positive Z axis. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzElClass.AboutBoresight">
      <summary>Determines orientation of the X and Y axes with respect to the parent's reference frame.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationAzElClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgOrientationAzEl">
      <summary>The hidden interface for IAgOrientationAzEl</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.SetValues(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>This property is deprecated. Use AssignAzEl instead.</summary>
      <param name="Azimuth"><para>The azimuth value.</para></param>
      <param name="Elevation"><para>The elevation value.</para></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationAzEl.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationAzEl.Azimuth">
      <summary>Measured in the XY plane of the parent reference frame about its Z axis in the right-handed sense for both vehicle-based sensors and facility-based sensors. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationAzEl.Elevation">
      <summary>Defined as the angle between the XY plane of the parent reference frame and the sensor or antenna boresight measured toward the positive Z axis. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationAzEl.AboutBoresight">
      <summary>Determines orientation of the X and Y axes with respect to the parent's reference frame.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationAzEl.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgOrientationAzEl">
      <summary>Interface for AzEl orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.SetValues(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>This property is deprecated. Use AssignAzEl instead.</summary>
      <param name="Azimuth"><para>The azimuth value.</para></param>
      <param name="Elevation"><para>The elevation value.</para></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationAzEl.Azimuth">
      <summary>Measured in the XY plane of the parent reference frame about its Z axis in the right-handed sense for both vehicle-based sensors and facility-based sensors. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationAzEl.Elevation">
      <summary>Defined as the angle between the XY plane of the parent reference frame and the sensor or antenna boresight measured toward the positive Z axis. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationAzEl.AboutBoresight">
      <summary>Determines orientation of the X and Y axes with respect to the parent's reference frame.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationAzEl.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationAzEl.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationEulerAngles">
      <summary>Euler Angles orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.SetValues(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignEulerAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="A"><para>The A value.</para></param>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAngles.Sequence">
      <summary>Euler rotation sequence. Must be set before A,B,C values. Otherwise the current A,B,C values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAngles.A">
      <summary>Euler A angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAngles.B">
      <summary>Euler b angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAngles.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationEulerAnglesClass">
      <summary>Euler Angles orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.SetValues(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignEulerAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="A"><para>The A value.</para></param>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationEulerAnglesClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAnglesClass.Sequence">
      <summary>Euler rotation sequence. Must be set before A,B,C values. Otherwise the current A,B,C values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAnglesClass.A">
      <summary>Euler A angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAnglesClass.B">
      <summary>Euler b angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAnglesClass.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationEulerAnglesClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgOrientationEulerAngles">
      <summary>The hidden interface for IAgOrientationEulerAngles</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.SetValues(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignEulerAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="A"><para>The A value.</para></param>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationEulerAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationEulerAngles.Sequence">
      <summary>Euler rotation sequence. Must be set before A,B,C values. Otherwise the current A,B,C values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationEulerAngles.A">
      <summary>Euler A angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationEulerAngles.B">
      <summary>Euler b angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationEulerAngles.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationEulerAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgOrientationEulerAngles">
      <summary>Interface for Euler Angles orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.SetValues(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignEulerAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="A"><para>The A value.</para></param>
      <param name="B"><para>The B value.</para></param>
      <param name="C"><para>The C value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationEulerAngles.Sequence">
      <summary>Euler rotation sequence. Must be set before A,B,C values. Otherwise the current A,B,C values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationEulerAngles.A">
      <summary>Euler A angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationEulerAngles.B">
      <summary>Euler b angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationEulerAngles.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationEulerAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationEulerAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationQuaternion">
      <summary>Quaternion orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.SetValues(System.Double,System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignQuaternion instead.</summary>
      <param name="QX"><para>The QX value.</para></param>
      <param name="QY"><para>The QY value.</para></param>
      <param name="QZ"><para>the QZ value.</para></param>
      <param name="QS"><para>the QS value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternion.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternion.QX">
      <summary>qx vector component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternion.QY">
      <summary>qy vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternion.QZ">
      <summary>qz vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternion.QS">
      <summary>qs scalar component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternion.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationQuaternionClass">
      <summary>Quaternion orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.SetValues(System.Double,System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignQuaternion instead.</summary>
      <param name="QX"><para>The QX value.</para></param>
      <param name="QY"><para>The QY value.</para></param>
      <param name="QZ"><para>the QZ value.</para></param>
      <param name="QS"><para>the QS value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationQuaternionClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternionClass.QX">
      <summary>qx vector component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternionClass.QY">
      <summary>qy vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternionClass.QZ">
      <summary>qz vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternionClass.QS">
      <summary>qs scalar component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationQuaternionClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgOrientationQuaternion">
      <summary>The hidden interface for IAgOrientationQuaternion</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.SetValues(System.Double,System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignQuaternion instead.</summary>
      <param name="QX"><para>The QX value.</para></param>
      <param name="QY"><para>The QY value.</para></param>
      <param name="QZ"><para>the QZ value.</para></param>
      <param name="QS"><para>the QS value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationQuaternion.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationQuaternion.QX">
      <summary>qx vector component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationQuaternion.QY">
      <summary>qy vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationQuaternion.QZ">
      <summary>qz vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationQuaternion.QS">
      <summary>qs scalar component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationQuaternion.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgOrientationQuaternion">
      <summary>Interface for Quaternion orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.SetValues(System.Double,System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignQuaternion instead.</summary>
      <param name="QX"><para>The QX value.</para></param>
      <param name="QY"><para>The QY value.</para></param>
      <param name="QZ"><para>the QZ value.</para></param>
      <param name="QS"><para>the QS value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationQuaternion.QX">
      <summary>qx vector component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationQuaternion.QY">
      <summary>qy vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationQuaternion.QZ">
      <summary>qz vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationQuaternion.QS">
      <summary>qs scalar component. Dimensionless.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationQuaternion.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationQuaternion.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationYPRAngles">
      <summary>Yaw-Pitch Roll (YPR) Angles orientation system.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.SetValues(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignYPRAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"><para>The Yaw value.</para></param>
      <param name="Pitch"><para>The Pitch value.</para></param>
      <param name="Roll"><para>The Roll value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAngles.Sequence">
      <summary>YPR sequence. Must be set before Yaw,Pitch,Roll values. Otherwise the current Yaw,Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAngles.Yaw">
      <summary>Yaw angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAngles.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAngles.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgOrientationYPRAnglesClass">
      <summary>Yaw-Pitch Roll (YPR) Angles orientation system.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.SetValues(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignYPRAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"><para>The Yaw value.</para></param>
      <param name="Pitch"><para>The Pitch value.</para></param>
      <param name="Roll"><para>The Roll value.</para></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgOrientationYPRAnglesClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAnglesClass.Sequence">
      <summary>YPR sequence. Must be set before Yaw,Pitch,Roll values. Otherwise the current Yaw,Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAnglesClass.Yaw">
      <summary>Yaw angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAnglesClass.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAnglesClass.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgOrientationYPRAnglesClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgOrientationYPRAngles">
      <summary>The hidden interface for IAgOrientationYPRAngles</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.SetValues(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignYPRAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"><para>The Yaw value.</para></param>
      <param name="Pitch"><para>The Pitch value.</para></param>
      <param name="Roll"><para>The Roll value.</para></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgOrientationYPRAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationYPRAngles.Sequence">
      <summary>YPR sequence. Must be set before Yaw,Pitch,Roll values. Otherwise the current Yaw,Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationYPRAngles.Yaw">
      <summary>Yaw angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationYPRAngles.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationYPRAngles.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgOrientationYPRAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgOrientationYPRAngles">
      <summary>Interface for Yaw-Pitch Roll (YPR) Angles orientation system.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.SetValues(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignYPRAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"><para>The Yaw value.</para></param>
      <param name="Pitch"><para>The Pitch value.</para></param>
      <param name="Roll"><para>The Roll value.</para></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationYPRAngles.Sequence">
      <summary>YPR sequence. Must be set before Yaw,Pitch,Roll values. Otherwise the current Yaw,Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationYPRAngles.Yaw">
      <summary>Yaw angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationYPRAngles.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationYPRAngles.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.<para>Converts to the specified enum and returns the IAgOrientation type. i.e ConvertTo(eAzEl) returns an IAgOrientationAzEl interface.</para></summary>
      <returns><para>IAgOrientation type.</para></returns>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"><para>The IAgOrientation type to assign from.</para></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgOrientationYPRAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationYPRAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDoublesCollection">
      <summary>A collection of doubles.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollection.Add(System.Double)">
      <summary>Add a value to the collection of doubles.</summary>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollection.RemoveAt(System.Int32)">
      <summary>Remove an element from the collection at a specified position.</summary>
      <param name="Index"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollection.RemoveAll">
      <summary>Clears the collection.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollection.ToArray">
      <summary>Returns an array of the elements in the collection</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollection.SetAt(System.Int32,System.Double)">
      <summary>Updates an element in the collection at a specified position.</summary>
      <param name="Index"></param>
      <param name="Value"></param>
    </member>
    <member name="P:AGI.STKUtil.AgDoublesCollection.Item">
      <summary>Returns a double at a specified position.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDoublesCollection.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDoublesCollection._NewEnum">
      <summary>Returns a collection enumerator.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgDoublesCollectionClass">
      <summary>A collection of doubles.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollectionClass.Add(System.Double)">
      <summary>Add a value to the collection of doubles.</summary>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollectionClass.RemoveAt(System.Int32)">
      <summary>Remove an element from the collection at a specified position.</summary>
      <param name="Index"></param>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollectionClass.RemoveAll">
      <summary>Clears the collection.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollectionClass.ToArray">
      <summary>Returns an array of the elements in the collection</summary>
    </member>
    <member name="M:AGI.STKUtil.AgDoublesCollectionClass.SetAt(System.Int32,System.Double)">
      <summary>Updates an element in the collection at a specified position.</summary>
      <param name="Index"></param>
      <param name="Value"></param>
    </member>
    <member name="P:AGI.STKUtil.AgDoublesCollectionClass.Item">
      <summary>Returns a double at a specified position.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDoublesCollectionClass.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgDoublesCollectionClass._NewEnum">
      <summary>Returns a collection enumerator.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgDoublesCollection">
      <summary>Represents a collection of doubles.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDoublesCollection.Add(System.Double)">
      <summary>Add a value to the collection of doubles.</summary>
      <param name="Value"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDoublesCollection.RemoveAt(System.Int32)">
      <summary>Remove an element from the collection at a specified position.</summary>
      <param name="Index"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgDoublesCollection.RemoveAll">
      <summary>Clears the collection.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDoublesCollection.ToArray">
      <summary>Returns an array of the elements in the collection</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgDoublesCollection.SetAt(System.Int32,System.Double)">
      <summary>Updates an element in the collection at a specified position.</summary>
      <param name="Index"></param>
      <param name="Value"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgDoublesCollection.Item">
      <summary>Returns a double at a specified position.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDoublesCollection.Count">
      <summary>Returns the number of items in the collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgDoublesCollection._NewEnum">
      <summary>Returns a collection enumerator.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCartesian3Vector">
      <summary>A 3-D cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian3Vector.Get(.double@,.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian3Vector.Set(System.Double,System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian3Vector.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian3Vector.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian3Vector.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian3Vector.Z">
      <summary>Z coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCartesian3VectorClass">
      <summary>A 3-D cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian3VectorClass.Get(.double@,.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian3VectorClass.Set(System.Double,System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian3VectorClass.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian3VectorClass.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian3VectorClass.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian3VectorClass.Z">
      <summary>Z coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCartesian3Vector">
      <summary>A hidden interface for IAgCartesian3Vector.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian3Vector.Get(.double@,.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian3Vector.Set(System.Double,System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian3Vector.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian3Vector.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian3Vector.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian3Vector.Z">
      <summary>Z coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCartesian2Vector">
      <summary>A 2-D cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian2Vector.Get(.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian2Vector.Set(System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian2Vector.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian2Vector.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian2Vector.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCartesian2VectorClass">
      <summary>A 2-D cartesian vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian2VectorClass.Get(.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian2VectorClass.Set(System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCartesian2VectorClass.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian2VectorClass.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCartesian2VectorClass.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCartesian2Vector">
      <summary>A hidden interface for IAgCartesian2Vector.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian2Vector.Get(.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian2Vector.Set(System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCartesian2Vector.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian2Vector.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCartesian2Vector.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgCartesian2Vector">
      <summary>Represents a cartesian 2-D vector.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian2Vector.Get(.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian2Vector.Set(System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
    </member>
    <member name="M:AGI.STKUtil.IAgCartesian2Vector.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian2Vector.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgCartesian2Vector.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPropertyInfo">
      <summary>Property Infomation coclass.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPropertyInfo.GetValue">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPropertyInfo.SetValue(System.Object)">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
      <param name="PropertyInfo"></param>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfo.Name">
      <summary>The name of the property.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfo.PropertyType">
      <summary>The type of property.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfo.HasMin">
      <summary>Used to determine if the property has a minimum value.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfo.HasMax">
      <summary>Used to determine if the property has a maximum value.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfo.Min">
      <summary>The minimum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfo.Max">
      <summary>The maximum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPropertyInfoClass">
      <summary>Property Infomation coclass.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPropertyInfoClass.GetValue">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgPropertyInfoClass.SetValue(System.Object)">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
      <param name="PropertyInfo"></param>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoClass.Name">
      <summary>The name of the property.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoClass.PropertyType">
      <summary>The type of property.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoClass.HasMin">
      <summary>Used to determine if the property has a minimum value.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoClass.HasMax">
      <summary>Used to determine if the property has a maximum value.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoClass.Min">
      <summary>The minimum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoClass.Max">
      <summary>The maximum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgPropertyInfo">
      <summary>Property information.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPropertyInfo.GetValue">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgPropertyInfo.SetValue(System.Object)">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
      <param name="PropertyInfo"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfo.Name">
      <summary>The name of the property.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfo.PropertyType">
      <summary>The type of property.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfo.HasMin">
      <summary>Used to determine if the property has a minimum value.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfo.HasMax">
      <summary>Used to determine if the property has a maximum value.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfo.Min">
      <summary>The minimum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfo.Max">
      <summary>The maximum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgEPropertyInfoValueType">
      <summary>The enumeration used to determine what type of property is being used.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPropertyInfoValueType.ePropertyInfoValueTypeInt">
      <summary>Property is of type int.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPropertyInfoValueType.ePropertyInfoValueTypeReal">
      <summary>Property is of type real.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPropertyInfoValueType.ePropertyInfoValueTypeQuantity">
      <summary>Property is of type IAgQuantity.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPropertyInfoValueType.ePropertyInfoValueTypeDate">
      <summary>Property is of type IAgDate.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPropertyInfoValueType.ePropertyInfoValueTypeString">
      <summary>Property is of type string.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPropertyInfoValueType.ePropertyInfoValueTypeBool">
      <summary>Property is of type bool.</summary>
    </member>
    <member name="F:AGI.STKUtil.AgEPropertyInfoValueType.ePropertyInfoValueTypeInterface">
      <summary>Property is an interface.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgPropertyInfo">
      <summary>The property information hidden interface.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPropertyInfo.GetValue">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgPropertyInfo.SetValue(System.Object)">
      <summary>The value of the property. Use PropertyType to determine the type to cast to.</summary>
      <param name="PropertyInfo"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgPropertyInfo.Name">
      <summary>The name of the property.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPropertyInfo.PropertyType">
      <summary>The type of property.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPropertyInfo.HasMin">
      <summary>Used to determine if the property has a minimum value.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPropertyInfo.HasMax">
      <summary>Used to determine if the property has a maximum value.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPropertyInfo.Min">
      <summary>The minimum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgPropertyInfo.Max">
      <summary>The maximum value of this property. Use PropertyType to determine the type to cast to.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPropertyInfoCollection">
      <summary>Property Infomation Collection coclass.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoCollection.Item">
      <summary>Allows the user to iterate through the properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoCollection._NewEnum">
      <summary>Enumerates through the properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoCollection.Count">
      <summary>The number of properties available.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgPropertyInfoCollectionClass">
      <summary>Property Infomation Collection coclass.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoCollectionClass.Item">
      <summary>Allows the user to iterate through the properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoCollectionClass._NewEnum">
      <summary>Enumerates through the properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgPropertyInfoCollectionClass.Count">
      <summary>The number of properties available.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgPropertyInfoCollection">
      <summary>The collection of properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfoCollection.Item">
      <summary>Allows the user to iterate through the properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfoCollection._NewEnum">
      <summary>Enumerates through the properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgPropertyInfoCollection.Count">
      <summary>The number of properties available.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgRuntimeTypeInfo">
      <summary>Runtime Type info coclass.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgRuntimeTypeInfo.GetItem(System.Int32)">
      <summary>Returns the property of the collection at the given index.</summary>
      <param name="Index"></param>
    </member>
    <member name="P:AGI.STKUtil.AgRuntimeTypeInfo.Properties">
      <summary>The collection of properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgRuntimeTypeInfo.IsCollection">
      <summary>Determines if the interface is a collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgRuntimeTypeInfo.Count">
      <summary>If the interface is a collection, returns the collection count.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgRuntimeTypeInfoClass">
      <summary>Runtime Type info coclass.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgRuntimeTypeInfoClass.GetItem(System.Int32)">
      <summary>Returns the property of the collection at the given index.</summary>
      <param name="Index"></param>
    </member>
    <member name="P:AGI.STKUtil.AgRuntimeTypeInfoClass.Properties">
      <summary>The collection of properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgRuntimeTypeInfoClass.IsCollection">
      <summary>Determines if the interface is a collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgRuntimeTypeInfoClass.Count">
      <summary>If the interface is a collection, returns the collection count.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgRuntimeTypeInfo">
      <summary>The component browser hidden interface.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgRuntimeTypeInfo.GetItem(System.Int32)">
      <summary>Returns the property of the collection at the given index.</summary>
      <param name="Index"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgRuntimeTypeInfo.Properties">
      <summary>The collection of properties.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgRuntimeTypeInfo.IsCollection">
      <summary>Determines if the interface is a collection.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgRuntimeTypeInfo.Count">
      <summary>If the interface is a collection, returns the collection count.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgRuntimeTypeInfo">
      <summary>Interface used to retrieve the properties at runtime.</summary>
    </member>
    <member name="M:AGI.STKUtil.IAgRuntimeTypeInfo.GetItem(System.Int32)">
      <summary>Returns the property of the collection at the given index.</summary>
      <param name="Index"></param>
    </member>
    <member name="P:AGI.STKUtil.IAgRuntimeTypeInfo.Properties">
      <summary>The collection of properties.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgRuntimeTypeInfo.IsCollection">
      <summary>Determines if the interface is a collection.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgRuntimeTypeInfo.Count">
      <summary>If the interface is a collection, returns the collection count.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationAzEl">
      <summary>AzEl orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.SetValues(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>This property is deprecated. Use AssignAzEl instead.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzEl.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzEl.Azimuth">
      <summary>Measured in the XY plane of the parent reference frame about its Z axis in the right-handed sense for both vehicle-based sensors and facility-based sensors. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzEl.Elevation">
      <summary>Defined as the angle between the XY plane of the parent reference frame and the sensor or antenna boresight measured toward the positive Z axis. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzEl.AboutBoresight">
      <summary>Determines orientation of the X and Y axes with respect to the parent's reference frame.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzEl.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzEl.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationAzElClass">
      <summary>AzEl orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.SetValues(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>This property is deprecated. Use AssignAzEl instead.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationAzElClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzElClass.Azimuth">
      <summary>Measured in the XY plane of the parent reference frame about its Z axis in the right-handed sense for both vehicle-based sensors and facility-based sensors. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzElClass.Elevation">
      <summary>Defined as the angle between the XY plane of the parent reference frame and the sensor or antenna boresight measured toward the positive Z axis. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzElClass.AboutBoresight">
      <summary>Determines orientation of the X and Y axes with respect to the parent's reference frame.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzElClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationAzElClass.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCROrientationAzEl">
      <summary>The hidden interface for IAgOrientationAzEl</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.SetValues(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>This property is deprecated. Use AssignAzEl instead.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationAzEl.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationAzEl.Azimuth">
      <summary>Measured in the XY plane of the parent reference frame about its Z axis in the right-handed sense for both vehicle-based sensors and facility-based sensors. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationAzEl.Elevation">
      <summary>Defined as the angle between the XY plane of the parent reference frame and the sensor or antenna boresight measured toward the positive Z axis. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationAzEl.AboutBoresight">
      <summary>Determines orientation of the X and Y axes with respect to the parent's reference frame.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationAzEl.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationAzEl.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.IAgOrientationPositionOffset">
      <summary>Interface for defining the orientation origin position offset relative to the parent object.</summary>
    </member>
    <member name="P:AGI.STKUtil.IAgOrientationPositionOffset.PositionOffset">
      <summary>Gets or sets the position offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationEulerAngles">
      <summary>Euler Angles orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.SetValues(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignEulerAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAngles.Sequence">
      <summary>Euler rotation sequence. Must be set before A,B,C values. Otherwise the current A,B,C values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAngles.A">
      <summary>Euler A angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAngles.B">
      <summary>Euler b angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAngles.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAngles.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationEulerAnglesClass">
      <summary>Euler Angles orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.SetValues(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignEulerAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationEulerAnglesClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAnglesClass.Sequence">
      <summary>Euler rotation sequence. Must be set before A,B,C values. Otherwise the current A,B,C values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAnglesClass.A">
      <summary>Euler A angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAnglesClass.B">
      <summary>Euler b angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAnglesClass.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAnglesClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationEulerAnglesClass.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCROrientationEulerAngles">
      <summary>The hidden interface for IAgOrientationEulerAngles</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.SetValues(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignEulerAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationEulerAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationEulerAngles.Sequence">
      <summary>Euler rotation sequence. Must be set before A,B,C values. Otherwise the current A,B,C values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationEulerAngles.A">
      <summary>Euler A angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationEulerAngles.B">
      <summary>Euler b angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationEulerAngles.C">
      <summary>Euler C angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationEulerAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationEulerAngles.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationQuaternion">
      <summary>Quaternion orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.SetValues(System.Double,System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignQuaternion instead.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternion.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternion.QX">
      <summary>qx vector component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternion.QY">
      <summary>qy vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternion.QZ">
      <summary>qz vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternion.QS">
      <summary>qs scalar component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternion.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternion.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationQuaternionClass">
      <summary>Quaternion orientation method.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.SetValues(System.Double,System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignQuaternion instead.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationQuaternionClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternionClass.QX">
      <summary>qx vector component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternionClass.QY">
      <summary>qy vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternionClass.QZ">
      <summary>qz vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternionClass.QS">
      <summary>qs scalar component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternionClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationQuaternionClass.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCROrientationQuaternion">
      <summary>The hidden interface for IAgOrientationQuaternion</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.SetValues(System.Double,System.Double,System.Double,System.Double)">
      <summary>This property is deprecated. Use AssignQuaternion instead.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationQuaternion.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationQuaternion.QX">
      <summary>qx vector component. Dimensionless</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationQuaternion.QY">
      <summary>qy vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationQuaternion.QZ">
      <summary>qz vector component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationQuaternion.QS">
      <summary>qs scalar component. Dimensionless.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationQuaternion.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationQuaternion.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationYPRAngles">
      <summary>Yaw-Pitch Roll (YPR) Angles orientation system.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.SetValues(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignYPRAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAngles.Sequence">
      <summary>YPR sequence. Must be set before Yaw,Pitch,Roll values. Otherwise the current Yaw,Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAngles.Yaw">
      <summary>Yaw angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAngles.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAngles.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAngles.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationYPRAnglesClass">
      <summary>Yaw-Pitch Roll (YPR) Angles orientation system.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.SetValues(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignYPRAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationYPRAnglesClass.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAnglesClass.Sequence">
      <summary>YPR sequence. Must be set before Yaw,Pitch,Roll values. Otherwise the current Yaw,Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAnglesClass.Yaw">
      <summary>Yaw angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAnglesClass.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAnglesClass.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAnglesClass.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationYPRAnglesClass.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil._IAgCROrientationYPRAngles">
      <summary>The hidden interface for IAgOrientationYPRAngles</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.SetValues(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>This property is deprecated. Use AssignYPRAngles instead.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.ConvertTo(AGI.STKUtil.AgEOrientationType)">
      <summary>Method to change the orientation method to the type specified.</summary>
      <param name="Type"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.Assign(AGI.STKUtil.IAgOrientation)">
      <summary>Assign a new orientation method.</summary>
      <param name="pOrientation"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.AssignAzEl(System.Object,System.Object,AGI.STKUtil.AgEAzElAboutBoresight)">
      <summary>Helper method to set orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.AssignEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.AssignQuaternion(System.Double,System.Double,System.Double,System.Double)">
      <summary>Helper method to set orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.AssignYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object,System.Object,System.Object)">
      <summary>Helper method to set orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryAzEl(System.Object@,System.Object@,AGI.STKUtil.AgEAzElAboutBoresight@)">
      <summary>Helper method to get orientation using the AzEl representation.</summary>
      <param name="Azimuth"></param>
      <param name="Elevation"></param>
      <param name="AboutBoresight"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryEulerAngles(AGI.STKUtil.AgEEulerOrientationSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the Euler angles representation.</summary>
      <param name="Sequence"></param>
      <param name="A"></param>
      <param name="B"></param>
      <param name="C"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryQuaternion(.double@,.double@,.double@,.double@)">
      <summary>Helper method to get orientation using the Quaternion representation.</summary>
      <param name="QX"></param>
      <param name="QY"></param>
      <param name="QZ"></param>
      <param name="QS"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryYPRAngles(AGI.STKUtil.AgEYPRAnglesSequence,System.Object@,System.Object@,System.Object@)">
      <summary>Helper method to get orientation using the YPR angles representation.</summary>
      <param name="Sequence"></param>
      <param name="Yaw"></param>
      <param name="Pitch"></param>
      <param name="Roll"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryAzElArray">
      <summary>Returns the AzEl elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryEulerAnglesArray(AGI.STKUtil.AgEEulerOrientationSequence)">
      <summary>Returns the Euler elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryQuaternionArray">
      <summary>Returns the Quaternion elements as an array.</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationYPRAngles.QueryYPRAnglesArray(AGI.STKUtil.AgEYPRAnglesSequence)">
      <summary>Returns the YPR Angles elements as an array.</summary>
      <param name="Sequence"></param>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationYPRAngles.Sequence">
      <summary>YPR sequence. Must be set before Yaw,Pitch,Roll values. Otherwise the current Yaw,Pitch,Roll values will be converted to the Sequence specified.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationYPRAngles.Yaw">
      <summary>Yaw angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationYPRAngles.Pitch">
      <summary>Pitch angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationYPRAngles.Roll">
      <summary>Roll angle. Uses Angle Dimension.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationYPRAngles.OrientationType">
      <summary>Returns the orientation method currently being used.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationYPRAngles.PositionOffset">
      <summary>Gets or sets the location offset cartesian vector.</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationOffsetCart">
      <summary>Orientation offset cartesian.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationOffsetCart.Set(System.Double,System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationOffsetCart.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationOffsetCart.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationOffsetCart.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationOffsetCart.Z">
      <summary>Z coordinate</summary>
    </member>
    <member name="T:AGI.STKUtil.AgCROrientationOffsetCartClass">
      <summary>Orientation offset cartesian.</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationOffsetCartClass.Set(System.Double,System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationOffsetCartClass.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationOffsetCartClass.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationOffsetCartClass.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil.AgCROrientationOffsetCartClass.Z">
      <summary>Z coordinate</summary>
    </member>
    <member name="M:AGI.STKUtil.AgCROrientationOffsetCartClass.Get(.double@,.double@,.double@)">
      <summary>Returns cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="T:AGI.STKUtil._IAgCROrientationOffsetCart">
      <summary>The hidden interface for IAgOrientationOffsetCart</summary>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationOffsetCart.Set(System.Double,System.Double,System.Double)">
      <summary>Sets cartesian vector</summary>
      <param name="X"></param>
      <param name="Y"></param>
      <param name="Z"></param>
    </member>
    <member name="M:AGI.STKUtil._IAgCROrientationOffsetCart.ToArray">
      <summary>Returns coordinates as an array.</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationOffsetCart.X">
      <summary>X coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationOffsetCart.Y">
      <summary>Y coordinate</summary>
    </member>
    <member name="P:AGI.STKUtil._IAgCROrientationOffsetCart.Z">
      <summary>Z coordinate</summary>
    </member>
  </members>
</doc>